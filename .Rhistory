)
View(classified_users)
with_some_info <- classified_users %>%
filter(!is.na(location) & !is.na(company) & !is.na(email))
View(with_some_info)
with_some_info <- classified_users %>%
filter(!is.na(location) | !is.na(company) | !is.na(email))
conn <- dbConnect(drv = PostgreSQL(),
dbname = "sdad",
host = "10.250.124.195",
port = 5432,
user = Sys.getenv("db_userid"),
password = Sys.getenv("db_pwd"))
github_users <- dbGetQuery(conn, "SELECT login, company, location, email FROM gh.ctrs_clean_0821 LIMIT 100")
dbDisconnect(conn)
start_time = Sys.time()
classified_by_orgs <- github_users %>%
detect_orgs(login, company, organization, academic, email,
country = TRUE, parent_org = TRUE, org_type = TRUE) %>%
rename(ac_country = country) %>%
detect_geographies(login, location, "country", email)
end_time = Sys.time()
time_to_classify = end_time - start_time; time_to_classify
View(classified_by_orgs)
rm(list = ls())
library(tidyverse)
library(tidyorgs)
library(diverstidy)
library(RPostgreSQL)
conn <- dbConnect(drv = PostgreSQL(),
dbname = "sdad",
host = "10.250.124.195",
port = 5432,
user = Sys.getenv("db_userid"),
password = Sys.getenv("db_pwd"))
github_users <- dbGetQuery(conn, "SELECT login, company, location, email FROM gh.ctrs_clean_0821")
dbDisconnect(conn)
start_time = Sys.time()
classified_by_orgs <- github_users %>%
detect_orgs(login, company, organization, academic, email,
country = TRUE, parent_org = TRUE, org_type = TRUE) %>%
rename(ac_country = country) %>%
detect_geographies(login, location, "country", email)
end_time = Sys.time()
time_to_classify = end_time - start_time; time_to_classify
View(classified_by_orgs)
with_some_info <- classified_users %>%
filter(!is.na(location) | !is.na(company) | !is.na(email))
with_some_info <- classified_by_orgs %>%
filter(!is.na(location) | !is.na(company) | !is.na(email))
View(with_some_info)
with_country_data <- classified_by_orgs %>%
filter(!is.na(country) | !is.na(ac_country))
View(with_country_data)
with_country_data <- classified_by_orgs %>%
filter(!is.na(country) | !is.na(ac_country)) %>%
mutate(matched = if_else(country = ac_country, TRUE, FALSE))
with_country_data <- classified_by_orgs %>%
filter(!is.na(country) | !is.na(ac_country)) %>%
mutate(matched = if_else(country == ac_country, TRUE, FALSE))
with_country_data <- classified_by_orgs %>%
filter(!is.na(country) | !is.na(ac_country)) %>%
mutate(matched = if_else(is.na(), TRUE, FALSE)) %>%
dt_mutate(new_country = ifelse(test = str_detect(string = country, pattern = NA), no = ac_country))
with_country_data <- classified_by_orgs %>%
filter(!is.na(country) | !is.na(ac_country)) %>%
mutate(matched = if_else(is.na(), TRUE, FALSE)) %>%
mutate(new_country = ifelse(test = str_detect(string = country, pattern = NA), no = ac_country))
with_country_data <- classified_by_orgs %>%
filter(!is.na(country) | !is.na(ac_country)) %>%
mutate(new_country = ifelse(test = str_detect(string = country, pattern = NA), no = ac_country))
with_country_data <- classified_by_orgs %>%
filter(!is.na(country) | !is.na(ac_country)) %>%
mutate(new_country = ifelse(str_detect(country, pattern = "Something"), no = ac_country))
with_country_data <- classified_by_orgs %>%
filter(!is.na(country) | !is.na(ac_country)) %>%
mutate(new_country = ifelse(str_detect(country, pattern = is.na(country)), no = ac_country))
with_country_data <- classified_by_orgs %>%
filter(!is.na(country) | !is.na(ac_country)) %>%
replace_with_na_all(country = ~.x == "missing")
with_country_data <- classified_by_orgs %>%
filter(!is.na(country) | !is.na(ac_country)) %>%
naniar::replace_with_na_all(country = ~.x == "missing")
with_country_data <- classified_by_orgs %>%
filter(!is.na(country) | !is.na(ac_country)) %>%
naniar::replace_with_na(replace = list(country = -99))
with_country_data <- classified_by_orgs %>%
filter(!is.na(country) | !is.na(ac_country)) %>%
naniar::replace_with_na(replace = list(country = -99))
with_country_data <- classified_by_orgs %>%
filter(!is.na(country) | !is.na(ac_country)) %>%
mutate(new_country = if_else(is.na(country), ac_country, country))
with_country_data <- classified_by_orgs %>%
filter(!is.na(country) | !is.na(ac_country))
View(with_country_data)
with_country_data %>%
dplyr::mutate(sector = replace_na(org_type, 0))
data(github_users)
email_to_orgs_df <- github_users %>%
email_to_orgs(login, email, organization, academic)
View(email_to_orgs_df)
load_all()
data(github_users)
devtools::install_github("brandonleekramer/diverstidy")
devtools::install_github("brandonleekramer/tidyorgs")
rm(list = ls())
library(tidyverse)
library(tidyorgs)
library(diverstidy)
library(RPostgreSQL)
rm(list = ls())
library(tidyverse)
library(tidyorgs)
library(diverstidy)
library(RPostgreSQL)
conn <- dbConnect(drv = PostgreSQL(),
dbname = "sdad",
host = "10.250.124.195",
port = 5432,
user = Sys.getenv("db_userid"),
password = Sys.getenv("db_pwd"))
github_users <- dbGetQuery(conn, "SELECT login, company, location, email FROM gh.ctrs_clean_0821")
dbDisconnect(conn)
start_time = Sys.time()
classified_by_orgs <- github_users %>%
detect_orgs(login, company, organization, academic, email,
country = TRUE, parent_org = TRUE, org_type = TRUE) %>%
rename(ac_country = country) %>%
detect_geographies(login, location, "country", email)
end_time = Sys.time()
time_to_classify = end_time - start_time; time_to_classify
# took just over an hour with 3.2m users
saveRDS(classified_users, "~/git/oss-2020/data/sectored_100821.rds")
rm(list = ls())
library(tidyverse)
library(tidyorgs)
library(diverstidy)
library(RPostgreSQL)
conn <- dbConnect(drv = PostgreSQL(),
dbname = "sdad",
host = "10.250.124.195",
port = 5432,
user = Sys.getenv("db_userid"),
password = Sys.getenv("db_pwd"))
github_users <- dbGetQuery(conn, "SELECT login, company, location, email FROM gh.ctrs_clean_0821")
dbDisconnect(conn)
saveRDS(github_users, "~/git/oss-2020/data/github_ctrs_clean_0821.rds")
devtools::install_github("brandonleekramer/diverstidy")
devtools::install_github("brandonleekramer/diverstidy", force = TRUE)
library(tidyverse)
library(tidyorgs)
library(diverstidy)
library(RPostgreSQL)
data("github_users")
github_users
github_users %>%
detect_geographies(login, location, "country", email)
rm(list = ls())
library(tidyverse)
library(tidyorgs)
library(diverstidy)
library(RPostgreSQL)
classified_users <- readRDS("data/github_sectored_101321.rds")
country_counts <- with_country_data %>%
unnest_legacy(country = base::strsplit(country, "\\|")) %>%
filter(country != "NA") %>%
group_by(country) %>%
count() %>%
arrange(-n)
only_country_info <- classified_users %>%
drop_na(country)
rm(only_country_info)
with_country_data <- classified_users %>%
filter(!is.na(country) | !is.na(ac_country)) %>%
mutate(country = if_else(is.na(country), ac_country, country)) %>%
select(login, country)
View(with_country_data)
chk %>%
filter(grepl("\\|", country))
with_country_data %>%
filter(grepl("\\|", country))
with_country_data %>%
filter(grepl("\\|", country)) %>%
mutate(country = sub("\\|.*", "", country))
with_country_data %>%
filter(grepl("\\|", country))
with_country_data <- classified_users %>%
filter(!is.na(country) | !is.na(ac_country)) %>%
mutate(country = if_else(is.na(country), ac_country, country)) %>%
select(login, location, country)
with_country_data <- classified_users %>%
filter(!is.na(country) | !is.na(ac_country)) %>%
mutate(country = if_else(is.na(country), ac_country, country)) %>%
mutate(country = str_replace(country, "Jersey|", ""),
country = str_replace(country, "Jersey", "")) %>%
select(login, location, country)
with_country_data <- classified_users %>%
filter(!is.na(country) | !is.na(ac_country)) %>%
mutate(country = if_else(is.na(country), ac_country, country)) %>%
mutate(country = str_replace(country, "Jersey\\|", ""),
country = str_replace(country, "Jersey", "")) %>%
select(login, location, country)
with_country_data <- classified_users %>%
filter(!is.na(country) | !is.na(ac_country)) %>%
mutate(country = if_else(is.na(country), ac_country, country)) %>%
mutate(country = str_replace(country, "Jersey\\|", ""),
country = str_replace(country, "Jersey", ""),
country = sub("\\|.*", "", country)) %>%
select(login, location, country)
with_country_data <- classified_users %>%
filter(!is.na(country) | !is.na(ac_country)) %>%
mutate(country = if_else(is.na(country), ac_country, country)) %>%
mutate(country = str_replace(country, "Jersey\\|", ""),
country = str_replace(country, "Jersey", "United States"),
country = sub("\\|.*", "", country)) %>%
select(login, location, country)
View(with_country_data)
with_country_data <- classified_users %>%
filter(!is.na(country) | !is.na(ac_country)) %>%
mutate(country = if_else(is.na(country), ac_country, country)) %>%
mutate(country = str_replace(country, "Jersey\\|", ""),
country = str_replace(country, "Jersey", "United States"),
country = sub("\\|.*", "", country)) %>%
select(login, country)
library(RPostgreSQL)
conn <- dbConnect(drv = PostgreSQL(),
dbname = "sdad",
host = "10.250.124.195",
port = 5432,
user = Sys.getenv("db_userid"),
password = Sys.getenv("db_pwd"))
#counts_by_repo <- dbGetQuery(conn, "SELECT * FROM gh_cost.cost_by_repo_0919_raw;")            # original_table
#counts_by_repo <- dbGetQuery(conn, "SELECT * FROM gh_cost.cost_by_repo_0919_dd;")             # deduplicated_table
#counts_by_repo <- dbGetQuery(conn, "SELECT * FROM gh_cost.cost_by_repo_0919_dd_nbots;")       # no bots
#counts_by_repo <- dbGetQuery(conn, "SELECT * FROM gh_cost.cost_by_repo_0919_dd_nmrc;")        # no multi-repo commits
#counts_by_repo <- dbGetQuery(conn, "SELECT * FROM gh_cost.cost_by_repo_0919_dd_nmrc_nbots;")  # nmrc + nbots
counts_by_repo <- dbGetQuery(conn, "SELECT * FROM gh_cost.cost_by_repo_0919_dd_nmrc_jbsc;")
# disconnect from postgresql database
dbDisconnect(conn)
View(counts_by_repo)
rm(counts_by_repo)
library(RPostgreSQL)
library(dplyr)
library(data.table)
library(tidyverse)
conn <- dbConnect(drv = PostgreSQL(),
dbname = "sdad",
host = "10.250.124.195",
port = 5432,
user = Sys.getenv("db_userid"),
password = Sys.getenv("db_pwd"))
#counts_by_year <- dbGetQuery(conn, "SELECT * FROM gh_cost.cost_by_year_0919_raw WHERE YEAR = 2019;")
#counts_by_year <- dbGetQuery(conn, "SELECT * FROM gh_cost.cost_by_year_0919_dd WHERE YEAR = 2019;")
#counts_by_year <- dbGetQuery(conn, "SELECT * FROM gh_cost.cost_by_year_0919_dd_nbots WHERE YEAR = 2019;")
#counts_by_year <- dbGetQuery(conn, "SELECT * FROM gh_cost.cost_by_year_0919_dd_nmrc WHERE YEAR = 2019;")
#counts_by_year <- dbGetQuery(conn, "SELECT * FROM gh_cost.cost_by_year_0919_dd_nmrc_nbots WHERE YEAR = 2019;")
counts_by_year <- dbGetQuery(conn, "SELECT * FROM gh_cost.cost_by_year_0919_dd_nmrc_jbsc WHERE YEAR = 2019;")
#counts_by_year <- dbGetQuery(conn, "SELECT * FROM gh_cost.cost_by_year_0919_dd_nmrc_jbsc_nbots WHERE YEAR = 2019;")
# disconnect from postgresql database
dbDisconnect(conn)
country_counts <- with_country_data %>%
unnest_legacy(country = base::strsplit(country, "\\|")) %>%
filter(country != "NA") %>%
group_by(country) %>%
count() %>%
arrange(-n)
View(country_counts)
conn <- dbConnect(drv = PostgreSQL(), dbname = "sdad",
host = "10.250.124.195", port = 5432,
user = Sys.getenv("db_userid"), password = Sys.getenv("db_pwd"))
dbWriteTable(conn, c("gh_cost", "users_geo_101521"), with_country_data, row.names = FALSE)
dbDisconnect(conn)
rm(list = ls())
library(tidyverse)
library(tidyorgs)
library(diverstidy)
library(RPostgreSQL)
conn <- dbConnect(drv = PostgreSQL(), dbname = "sdad",
host = "10.250.124.195", port = 5432,
user = Sys.getenv("db_userid"), password = Sys.getenv("db_pwd"))
counts_by_repo <- dbGetQuery(conn, "SELECT * FROM gh_cost.cost_by_repo_0919_dd_nmrc_jbsc;")
dbDisconnect(conn)
counts_by_repo <- as.data.table(counts_by_repo)
#COST BASED ON Additions
counts_by_repo[,adds_wo_gross := round(2.5 * (2.4 * (additions/1000)^1.05)^0.38,2)]
counts_by_repo[,adds_w_gross := round(2.5 * (2.4 * (additions/1000)^1.05)^0.38,2)]
#COST BASED ON Additions + Deletions
counts_by_repo[,sum_wo_gross := round(2.5 * (2.4 * (sum_adds_dels/1000)^1.05)^0.38,2)]
counts_by_repo[,sum_w_gross := round(2.5 * (2.4 * (sum_adds_dels/1000)^1.05)^0.38,2)]
#COST BASED ON Additions - Deletions
counts_by_repo[,net_wo_gross := round(2.5 * (2.4 * (net_adds_dels/1000)^1.05)^0.38,2)]
counts_by_repo[,net_w_gross := round(2.5 * (2.4 * (net_adds_dels/1000)^1.05)^0.38,2)]
conn <- dbConnect(drv = PostgreSQL(), dbname = "sdad",
host = "10.250.124.195", port = 5432,
user = Sys.getenv("db_userid"), password = Sys.getenv("db_pwd"))
counts_by_country <- dbGetQuery(conn, "SELECT * FROM gh_cost.cost_by_country_0919_dd_nmrc_jbsc;")
dbDisconnect(conn)
table(counts_by_country$country)
library(tidytable)
# joints sector info and the cost estimates at repo level
repos_geo_joined <- counts_by_country %>%
dt_rename(geo_commits = commits,
geo_additions = additions,
geo_deltions = deletions,
geo_sum = sum_adds_dels,
geo_net = net_adds_dels) %>%
left_join(counts_by_repo, by = "slug")
library(tidytable)
# joints sector info and the cost estimates at repo level
repos_geo_joined <- counts_by_country %>%
dt_rename(geo_commits = commits,
geo_additions = additions,
geo_deltions = deletions,
geo_sum = sum_adds_dels,
geo_net = net_adds_dels) %>%
left_join(counts_by_repo, by = "slug")
# joints sector info and the cost estimates at repo level
repos_geo_joined <- counts_by_country %>%
tidytable::dt_rename(geo_commits = commits,
geo_additions = additions,
geo_deltions = deletions,
geo_sum = sum_adds_dels,
geo_net = net_adds_dels) %>%
left_join(counts_by_repo, by = "slug")
# joints sector info and the cost estimates at repo level
repos_geo_joined <- counts_by_country %>%
maditr::dt_rename(geo_commits = commits,
geo_additions = additions,
geo_deltions = deletions,
geo_sum = sum_adds_dels,
geo_net = net_adds_dels) %>%
left_join(counts_by_repo, by = "slug")
# joints sector info and the cost estimates at repo level
repos_geo_joined <- counts_by_country %>%
rename.(geo_commits = commits,
geo_additions = additions,
geo_deltions = deletions,
geo_sum = sum_adds_dels,
geo_net = net_adds_dels) %>%
left_join(counts_by_repo, by = "slug")
# calculates the cost for sectors additions
repos_geo_joined <- repos_geo_joined %>%
rename.(repo_additions = additions,
repo_deletions = deletions) %>%
mutate.(geo_fraction = round(geo_additions / repo_additions, 3),
geo_cost_wo_gross = geo_fraction * adds_wo_gross,
geo_cost_w_gross = geo_fraction * adds_w_gross) %>%
arrange.(slug, country, geo_fraction)
repos_geo_joined$geo_cost_wo_gross[is.nan(repos_geo_joined$geo_cost_wo_gross)] <- 0
repos_geo_joined$geo_cost_w_gross[is.nan(repos_geo_joined$geo_cost_w_gross)] <- 0
View(repos_geo_joined)
conn <- dbConnect(drv = PostgreSQL(), dbname = "sdad",
host = "10.250.124.195", port = 5432,
user = Sys.getenv("db_userid"), password = Sys.getenv("db_pwd"))
counts_by_country <- dbGetQuery(conn, "SELECT * FROM gh_cost.cost_by_country_0919_dd_nmrc_jbsc_101521;")
dbDisconnect(conn)
table(counts_by_country$country)
conn <- dbConnect(drv = PostgreSQL(), dbname = "sdad",
host = "10.250.124.195", port = 5432,
user = Sys.getenv("db_userid"), password = Sys.getenv("db_pwd"))
counts_by_country <- dbGetQuery(conn, "SELECT * FROM gh_cost.cost_by_country_annual_0919_dd_nmrc_jbsc_101521;")
dbDisconnect(conn)
table(counts_by_country$country)
conn <- dbConnect(drv = PostgreSQL(), dbname = "sdad",
host = "10.250.124.195", port = 5432,
user = Sys.getenv("db_userid"), password = Sys.getenv("db_pwd"))
counts_by_year <- dbGetQuery(conn, "SELECT * FROM gh_cost.cost_by_year_0919_dd_nmrc_jbsc;")
dbDisconnect(conn)
rm(cost_by_repo)
rm(counts_by_repo)
counts_by_repo <- as.data.table(counts_by_repo)
counts_by_year <- as.data.table(counts_by_year)
#COST BASED ON Additions
counts_by_year[,adds_wo_gross := round(2.5 * (2.4 * (additions/1000)^1.05)^0.38,2)]
counts_by_year[,adds_w_gross := round(2.5 * (2.4 * (additions/1000)^1.05)^0.38,2)]
#COST BASED ON Additions + Deletions
counts_by_year[,sum_wo_gross := round(2.5 * (2.4 * (sum_adds_dels/1000)^1.05)^0.38,2)]
counts_by_year[,sum_w_gross := round(2.5 * (2.4 * (sum_adds_dels/1000)^1.05)^0.38,2)]
#COST BASED ON Additions - Deletions
counts_by_year[,net_wo_gross := round(2.5 * (2.4 * (net_adds_dels/1000)^1.05)^0.38,2)]
counts_by_year[,net_w_gross := round(2.5 * (2.4 * (net_adds_dels/1000)^1.05)^0.38,2)]
conn <- dbConnect(drv = PostgreSQL(), dbname = "sdad",
host = "10.250.124.195", port = 5432,
user = Sys.getenv("db_userid"), password = Sys.getenv("db_pwd"))
counts_by_country <- dbGetQuery(conn, "SELECT * FROM gh_cost.cost_by_country_annual_0919_dd_nmrc_jbsc_101521;")
dbDisconnect(conn)
table(counts_by_country$country)
repos_geo_joined <- counts_by_country %>%
select(-year) %>%
dt_rename(geo_commits = commits,
geo_additions = additions,
geo_deltions = deletions,
geo_sum = sum_adds_dels,
geo_net = net_adds_dels) %>%
left_join(counts_by_year, by = "slug") %>%
select(slug, country, year, everything())
repos_geo_joined <- counts_by_country %>%
select(-year) %>%
rename.(geo_commits = commits,
geo_additions = additions,
geo_deltions = deletions,
geo_sum = sum_adds_dels,
geo_net = net_adds_dels) %>%
left_join(counts_by_year, by = "slug") %>%
select.(slug, country, year, everything())
# calculates the cost for sectors additions
repos_geo_joined <- repos_geo_joined %>%
rename.(repo_additions = additions,
repo_deletions = deletions) %>%
mutate.(geo_fraction = round(geo_additions / repo_additions, 3),
geo_cost_wo_gross = geo_fraction * adds_wo_gross,
geo_cost_w_gross = geo_fraction * adds_w_gross) %>%
arrange.(slug, country, geo_fraction)
repos_geo_joined$geo_cost_wo_gross[is.nan(repos_geo_joined$geo_cost_wo_gross)] <- 0
repos_geo_joined$geo_cost_w_gross[is.nan(repos_geo_joined$geo_cost_w_gross)] <- 0
costs_by_country <- repos_geo_joined %>%
group_by(country) %>%
summarize(geo_adds_wo_gross = sum(geo_cost_wo_gross),
geo_adds_w_gross = sum(geo_cost_w_gross)) %>%
arrange(-geo_adds_wo_gross); costs_by_country
costs_by_country <- costs_by_country %>%
mutate(geo_binary = "Other Countries") %>%
mutate(geo_binary = ifelse(country == "Missing", "Missing",
ifelse(country == "us", "United States", geo_binary))) %>%
group_by(geo_binary) %>%
summarize(geo_adds_wo_gross = sum(geo_adds_wo_gross),
geo_adds_w_gross = sum(geo_adds_w_gross))
costs_by_country
costs_by_country <- costs_by_country %>%
add_row(geo_binary = "Totals",
geo_adds_wo_gross = sum(costs_by_country$geo_adds_wo_gross),
geo_adds_w_gross = sum(costs_by_country$geo_adds_w_gross))
costs_by_country <- costs_by_country %>%
rename(personal_months = geo_adds_wo_gross,
geography = geo_binary) %>%
mutate(number_of_developers = personal_months / 12) %>%
select(-geo_adds_w_gross)
costs_by_country
repos_geo_joined
costs_by_country <- repos_geo_joined %>%
group_by(country) %>%
summarize(geo_adds_wo_gross = sum(geo_cost_wo_gross),
geo_adds_w_gross = sum(geo_cost_w_gross)) %>%
arrange(-geo_adds_wo_gross); costs_by_country
costs_by_country <- repos_geo_joined %>%
group_by(country) %>%
summarize(person_months = sum(geo_cost_wo_gross)) %>%
arrange(-person_months); costs_by_country
costs_by_country <- repos_geo_joined %>%
group_by(country, year) %>%
summarize(person_months = sum(geo_cost_wo_gross)) %>%
arrange(-person_months); costs_by_country
costs_by_country <- repos_geo_joined %>%
group_by(country, year) %>%
summarize(person_months = sum(geo_cost_wo_gross)) %>%
arrange(-country, year); costs_by_country
costs_by_country <- repos_geo_joined %>%
group_by(country, year) %>%
summarize(person_months = sum(geo_cost_wo_gross)) %>%
arrange(-country, -year); costs_by_country
costs_by_country <- repos_geo_joined %>%
group_by(country, year) %>%
summarize(person_months = sum(geo_cost_wo_gross)) %>%
arrange(country, year); costs_by_country
View(costs_by_country)
View(costs_by_country)
costs_by_country_simplified <- costs_by_country %>%
mutate(geo_binary = "Other Countries") %>%
mutate(geo_binary = ifelse(country == "Missing", "Missing",
ifelse(country == "us", "United States", geo_binary)))
View(costs_by_country_simplified)
costs_by_country_simplified <- costs_by_country %>%
mutate(geo_binary = "Other Countries") %>%
mutate(geo_binary = ifelse(country == "Missing", "Missing",
ifelse(country == "us", "United States", geo_binary))) %>%
group_by(geo_binary, year) %>%
summarize(person_months = sum(geo_cost_wo_gross)) %>%
rename(geography = geo_binary)
costs_by_country_simplified <- costs_by_country %>%
mutate(geo_binary = "Other Countries") %>%
mutate(geo_binary = ifelse(country == "Missing", "Missing",
ifelse(country == "us", "United States", geo_binary))) %>%
group_by(geo_binary, year) %>%
summarize(person_months = sum(geo_cost_wo_gross))
costs_by_country_simplified <- costs_by_country %>%
mutate(geo_binary = "Other Countries") %>%
mutate(geo_binary = ifelse(country == "Missing", "Missing",
ifelse(country == "us", "United States", geo_binary)))
costs_by_country_simplified <- costs_by_country %>%
mutate(geo_binary = "Other Countries") %>%
mutate(geo_binary = ifelse(country == "Missing", "Missing",
ifelse(country == "us", "United States", geo_binary))) %>%
group_by(geo_binary, year)
costs_by_country_simplified <- costs_by_country %>%
mutate(geo_binary = "Other Countries") %>%
mutate(geo_binary = ifelse(country == "Missing", "Missing",
ifelse(country == "us", "United States", geo_binary))) %>%
group_by(geo_binary, year) %>%
summarize(person_months = sum(person_months)) %>%
rename(geography = geo_binary)
costs_by_country_simplified <- costs_by_country %>%
mutate(geo_binary = "Other Countries") %>%
mutate(geo_binary = ifelse(country == "Missing", "Missing",
ifelse(country == "United States", "United States", geo_binary))) %>%
group_by(geo_binary, year) %>%
summarize(person_months = sum(person_months)) %>%
rename(geography = geo_binary)
setwd("/sfs/qumulo/qhome/kb7hp/git/oss-2020/data/cost_estimations/06_cost_dd_nmrc_jbsc")
write_csv(costs_by_country_simplified, "cost_bycountry_summary_2019_pms_101521.csv")
setwd("/sfs/qumulo/qhome/kb7hp/git/oss-2020/data/cost_estimations")
write_csv(costs_by_country_simplified, "cost_bycountry_summary_2019_pms_101521.csv")
library(tidyverse)
